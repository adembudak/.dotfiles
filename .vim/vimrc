set nonumber
set autoread
set splitbelow
set splitright
set signcolumn=yes
set encoding=utf-8

runtime! ftplugin/man.vim

call plug#begin()

Plug 'tpope/vim-sensible'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dracula/vim'

call plug#end()

let g:coc_global_extensions = [
  \'coc-json'
  \,'coc-yaml'
  \,'coc-git'
  \,'coc-clangd'
  \,'coc-explorer'
\]

colorscheme dracula

let mapleader = "t"

augroup vimrc
  autocmd! BufWritePost $MYVIMRC :source % | redraw!
augroup end

augroup coc
  autocmd! BufWritePost $MYVIMDIR/coc-settings.json :CocRestart
augroup end

nnoremap <leader>cr :CocRestart <enter>

":help coc-rename
nnoremap         e  :call CocActionAsync('rename') <enter>
nnoremap        fe  :CocCommand document.renameCurrentWord <enter>

":h coc-hover
nnoremap <leader>w  :call CocActionAsync('doHover') <enter>

":h coc-format
nnoremap        ff  :call CocActionAsync('format') <enter>
vnoremap        ff  :call CocActionAsync('formatSelected', visualmode()) <enter>

let b:coc_trim_trailing_whitespace = 1
let b:coc_trim_final_newlines = 1

":h coc-completion
inoremap <silent><expr> <C-n> coc#pum#visible() ? coc#pum#next(1) : "\<C-n>"
inoremap <silent><expr> <C-p> coc#pum#visible() ? coc#pum#prev(1) : "\<C-p>"
inoremap <silent><expr> <C-e> coc#pum#visible() ? coc#pum#cancel() : "\<C-e>"
inoremap <silent><expr> <C-y> coc#pum#visible() ? coc#pum#confirm() : "\<C-y>"

":h coc-diagnostics
nnoremap <leader>e  <Plug>(coc-diagnostic-next-error)
nnoremap <leader>E  <Plug>(coc-diagnostic-prev-error)
nnoremap <leader>M  <Plug>(coc-diagnostic-next)

":h coc-locations
nnoremap <silent> <leader>g :call CocAction('jumpDefinition') <enter>
nnoremap <silent> <leader>s :call CocAction('jumpDeclaration') <enter>
nnoremap <silent> <leader>h :call CocAction('jumpImplementation') <enter>
map <leader>wa <Plug>(coc-references-used)

":h coc-code-actions
nmap ft <Plug>(coc-fix-current)

set updatetime=500
autocmd CursorHold *.{c,cpp,d,rust,zig} if CocHasProvider('hover') | silent call CocActionAsync('doHover') | endif

function! ShowLSPCapabilities()
   const features = [
       'callHierarchy',
       'codeAction',
       'codeLens',
       'declaration',
       'definition',
       'documentColor',
       'documentHighlight',
       'documentLink',
       'documentSymbol',
       'formatOnType',
       'formatRange',
       'foldingRange',
       'formac',
       'hover',
       'implementation',
       'inlayHint',
       'ioTypeEdit',
       'linkedEditing',
       'nnlineValue',
       'reference',
       'rename',
       'selectionRange',
       'semanticTokens',
       'semanticTokensRange',
       'signature',
       'typeDefinition',
       'typeHierarchy',
       'workspaceSymbols'];

  for f in features
    echo f . ': ' . CocAction('hasProvider', f)
  endfor
endfunction

