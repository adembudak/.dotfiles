set nonumber
set autoread
set splitbelow
set splitright
set signcolumn=yes

runtime! ftplugin/man.vim

call plug#begin()

Plug 'tpope/vim-sensible'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dracula/vim'

call plug#end()

let g:coc_global_extensions = [
  \'coc-json'
  \,'coc-yaml'
  \,'coc-git'
  \,'coc-clangd'
  \,'coc-explorer'
\]

colorscheme dracula

let mapleader = "t"

augroup vimrc
  autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
augroup end

nnoremap <leader>cr :CocRestart <enter>

":help coc-rename
nnoremap         e  :call CocActionAsync('rename') <enter>
nnoremap        fe  :CocCommand document.renameCurrentWord <enter>

nnoremap <leader>w  :call CocActionAsync('doHover') <enter>

":h coc-format
nnoremap        ff  :call CocActionAsync('format') <enter>
vnoremap        ff  :call CocActionAsync('formatSelected', visualmode()) <enter>

let b:coc_trim_trailing_whitespace = 1
let b:coc_trim_final_newlines = 1

":h coc-completion
inoremap <silent><expr> <C-n> coc#pum#visible() ? coc#pum#next(1) : "\<C-n>"
inoremap <silent><expr> <C-p> coc#pum#visible() ? coc#pum#prev(1) : "\<C-p>"
inoremap <silent><expr> <C-e> coc#pum#visible() ? coc#pum#cancel() : "\<C-e>"
inoremap <silent><expr> <C-y> coc#pum#visible() ? coc#pum#confirm() : "\<C-y>"

":h coc-diagnostics
nnoremap <leader>e  <Plug>(coc-diagnostic-next-error)
nnoremap <leader>E  <Plug>(coc-diagnostic-prev-error)
nnoremap <leader>M  <Plug>(coc-diagnostic-next)


function! ShowLSPCapabilities()
  const features = [
           \ 'rename',
           \ 'ioTypeEdit',
           \ 'documentLink',
           \ 'documentColor',
           \ 'foldingRange',
           \ 'formac',
           \ 'codeAction',
           \ 'workspaceSymbols',
           \ 'formatRange',
           \ 'hover',
           \ 'signature',
           \ 'documentSymbol',
           \ 'documentHighlight',
           \ 'definition',
           \ 'declaration',
           \ 'typeDefinition',
           \ 'reference',
           \ 'implementation',
           \ 'codeLens',
           \ 'selectionRange',
           \ 'formatOnType',
           \ 'callHierarchy',
           \ 'semanticTokens',
           \ 'semanticTokensRange',
           \ 'linkedEditing',
           \ 'inlayHint',
           \ 'nnlineValue',
           \ 'typeHierarchy'
           \ ]

  for f in features
    echo f . ': ' . CocAction('hasProvider', f)
  endfor
endfunction

